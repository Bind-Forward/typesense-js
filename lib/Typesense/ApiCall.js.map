{"version":3,"sources":["Typesense/ApiCall.js"],"names":["APIKEYHEADERNAME","HEALTHY","UNHEALTHY","ApiCall","configuration","_configuration","_apiKey","apiKey","_nodes","JSON","parse","stringify","nodes","_nearestNode","nearestNode","_connectionTimeoutSeconds","connectionTimeoutSeconds","_healthcheckIntervalSeconds","healthcheckIntervalSeconds","_numRetriesPerRequest","numRetries","_retryIntervalSeconds","retryIntervalSeconds","_logger","logger","_initializeMetadataForNodes","_currentNodeIndex","endpoint","queryParameters","performRequest","bodyParameters","requestType","additionalHeaders","validate","requestNumber","Date","now","debug","toUpperCase","numTries","node","_getNextNode","index","requestOptions","method","url","_uriFor","headers","Object","assign","_defaultHeaders","timeout","maxContentLength","Infinity","maxBodyLength","validateStatus","status","transformResponse","data","transformedData","undefined","startsWith","params","response","_setNodeHealthcheck","Promise","resolve","reject","_customErrorForResponse","message","lastException","warn","code","_timer","isHealthy","_nodeDueForHealthcheck","map","join","candidateNode","i","length","isDueForHealthcheck","lastAccessTimestamp","forEach","protocol","host","port","path","defaultHeaders","seconds","setTimeout","messageFromServer","CustomErrorKlass","RequestMalformed","RequestUnauthorized","ObjectNotFound","ObjectAlreadyExists","ObjectUnprocessable","ServerError","HTTPError","errorMessage","trim","customErrror","httpStatus"],"mappings":"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","sourcesContent":["'use strict'\nimport axios from 'axios'\nimport {\n  HTTPError,\n  ObjectAlreadyExists,\n  ObjectNotFound,\n  ObjectUnprocessable,\n  RequestMalformed,\n  RequestUnauthorized,\n  ServerError\n} from './Errors'\n\nconst APIKEYHEADERNAME = 'X-TYPESENSE-API-KEY'\nconst HEALTHY = true\nconst UNHEALTHY = false\n\nexport default class ApiCall {\n  constructor (configuration) {\n    this._configuration = configuration\n\n    this._apiKey = this._configuration.apiKey\n    this._nodes = JSON.parse(JSON.stringify(this._configuration.nodes)) // Make a copy, since we'll be adding additional metadata to the nodes\n    this._nearestNode = JSON.parse(JSON.stringify(this._configuration.nearestNode))\n    this._connectionTimeoutSeconds = this._configuration.connectionTimeoutSeconds\n    this._healthcheckIntervalSeconds = this._configuration.healthcheckIntervalSeconds\n    this._numRetriesPerRequest = this._configuration.numRetries\n    this._retryIntervalSeconds = this._configuration.retryIntervalSeconds\n\n    this._logger = this._configuration.logger\n\n    this._initializeMetadataForNodes()\n    this._currentNodeIndex = -1\n  }\n\n  get (endpoint, queryParameters = {}) {\n    return this.performRequest('get', endpoint, {queryParameters})\n  }\n\n  delete (endpoint, queryParameters = {}) {\n    return this.performRequest('delete', endpoint, {queryParameters})\n  }\n\n  post (endpoint, bodyParameters = {}, queryParameters = {}) {\n    return this.performRequest('post', endpoint, {queryParameters, bodyParameters})\n  }\n\n  put (endpoint, bodyParameters = {}, queryParameters = {}) {\n    return this.performRequest('put', endpoint, {queryParameters, bodyParameters})\n  }\n\n  async performRequest (requestType, endpoint, {queryParameters = null, bodyParameters = null, additionalHeaders = {}}) {\n    this\n      ._configuration\n      .validate()\n\n    const requestNumber = Date.now()\n    let lastException\n    this._logger.debug(`Request #${requestNumber}: Performing ${requestType.toUpperCase()} request: ${endpoint}`)\n    for (let numTries = 1; numTries <= this._numRetriesPerRequest + 1; numTries++) {\n      let node = this._getNextNode(requestNumber)\n      this._logger.debug(`Request #${requestNumber}: Attempting ${requestType.toUpperCase()} request Try #${numTries} to Node ${node.index}`)\n      try {\n        let requestOptions = {\n          method: requestType,\n          url: this._uriFor(endpoint, node),\n          headers: Object.assign({}, this._defaultHeaders(), additionalHeaders),\n          timeout: this._connectionTimeoutSeconds * 1000,\n          maxContentLength: Infinity,\n          maxBodyLength: Infinity,\n          validateStatus: (status) => {\n            /* Override default validateStatus, which only considers 2xx a success.\n                In our case, if the server returns any HTTP code, we will handle it below.\n                We do this to be able to raise custom errors based on response code.\n             */\n            return status > 0\n          },\n          transformResponse: [(data, headers) => {\n            let transformedData = data\n            if (headers !== undefined && typeof data === 'string' && headers['content-type'].startsWith('application/json')) {\n              transformedData = JSON.parse(data)\n            }\n            return transformedData\n          }]\n        }\n\n        if (queryParameters) {\n          requestOptions.params = queryParameters\n        }\n\n        if (bodyParameters) {\n          requestOptions.data = bodyParameters\n        }\n\n        let response = await axios(requestOptions)\n        if (response.status >= 1 && response.status <= 499) {\n          // Treat any status code > 0 and < 500 to be an indication that node is healthy\n          // We exclude 0 since some clients return 0 when request fails\n          this._setNodeHealthcheck(node, HEALTHY)\n        }\n        this._logger.debug(`Request #${requestNumber}: Request to Node ${node.index} was made. Response Code was ${response.status}.`)\n\n        if (response.status >= 200 && response.status < 300) {\n          // If response is 2xx return a resolved promise\n          return Promise.resolve(response.data)\n        } else if (response.status < 500) {\n          // Next, if response is anything but 5xx, don't retry, return a custom error\n          return Promise.reject(this._customErrorForResponse(response, response.data.message))\n        } else {\n          // Retry all other HTTP errors (HTTPStatus > 500)\n          // This will get caught by the catch block below\n          throw this._customErrorForResponse(response, response.data.message)\n        }\n      } catch (error) {\n        // This block handles retries for HTTPStatus > 500 and network layer issues like connection timeouts\n        this._setNodeHealthcheck(node, UNHEALTHY)\n        lastException = error\n        this._logger.warn(`Request #${requestNumber}: Request to Node ${node.index} failed due to \"${error.code} ${error.message}${error.response == null ? '' : ' - ' + JSON.stringify(error.response.data)}\"`)\n        // this._logger.debug(error.stack)\n        this._logger.warn(`Request #${requestNumber}: Sleeping for ${this._retryIntervalSeconds}s and then retrying request...`)\n        await this._timer(this._retryIntervalSeconds)\n      }\n    }\n    this._logger.debug(`Request #${requestNumber}: No retries left. Raising last error`)\n    return Promise.reject(lastException)\n  }\n\n  // Attempts to find the next healthy node, looping through the list of nodes once.\n  //   But if no healthy nodes are found, it will just return the next node, even if it's unhealthy\n  //     so we can try the request for good measure, in case that node has become healthy since\n  _getNextNode (requestNumber = 0) {\n    // Check if nearestNode is set and is healthy, if so return it\n    if (this._nearestNode != null) {\n      this._logger.debug(`Request #${requestNumber}: Nodes Health: Node ${this._nearestNode.index} is ${this._nearestNode.isHealthy === true ? 'Healthy' : 'Unhealthy'}`)\n      if (this._nearestNode.isHealthy === true || this._nodeDueForHealthcheck(this._nearestNode, requestNumber)) {\n        this._logger.debug(`Request #${requestNumber}: Updated current node to Node ${this._nearestNode.index}`)\n        return this._nearestNode\n      }\n      this._logger.debug(`Request #${requestNumber}: Falling back to individual nodes`)\n    }\n\n    // Fallback to nodes as usual\n    this._logger.debug(`Request #${requestNumber}: Nodes Health: ${this._nodes.map(node => `Node ${node.index} is ${node.isHealthy === true ? 'Healthy' : 'Unhealthy'}`).join(' || ')}`)\n    let candidateNode\n    for (let i = 0; i <= this._nodes.length; i++) {\n      this._currentNodeIndex = (this._currentNodeIndex + 1) % this._nodes.length\n      candidateNode = this._nodes[this._currentNodeIndex]\n      if (candidateNode.isHealthy === true || this._nodeDueForHealthcheck(candidateNode, requestNumber)) {\n        this._logger.debug(`Request #${requestNumber}: Updated current node to Node ${candidateNode.index}`)\n        return candidateNode\n      }\n    }\n\n    // None of the nodes are marked healthy, but some of them could have become healthy since last health check.\n    //  So we will just return the next node.\n    this._logger.debug(`Request #${requestNumber}: No healthy nodes were found. Returning the next node, Node ${candidateNode.index}`)\n    return candidateNode\n  }\n\n  _nodeDueForHealthcheck (node, requestNumber = 0) {\n    const isDueForHealthcheck = Date.now() - node.lastAccessTimestamp > (this._healthcheckIntervalSeconds * 1000)\n    if (isDueForHealthcheck) {\n      this._logger.debug(`Request #${requestNumber}: Node ${node.index} has exceeded healtcheckIntervalSeconds of ${this._healthcheckIntervalSeconds}. Adding it back into rotation.`)\n    }\n    return isDueForHealthcheck\n  }\n\n  _initializeMetadataForNodes () {\n    if (this._nearestNode != null) {\n      this._nearestNode.index = 'nearestNode'\n      this._setNodeHealthcheck(this._nearestNode, HEALTHY)\n    }\n\n    this._nodes.forEach((node, i) => {\n      node.index = i\n      this._setNodeHealthcheck(node, HEALTHY)\n    })\n  }\n\n  _setNodeHealthcheck (node, isHealthy) {\n    node.isHealthy = isHealthy\n    node.lastAccessTimestamp = Date.now()\n  }\n\n  _uriFor (endpoint, node) {\n    return `${node.protocol}://${node.host}:${node.port}${node.path}${endpoint}`\n  }\n\n  _defaultHeaders () {\n    let defaultHeaders = {}\n    defaultHeaders[APIKEYHEADERNAME] = this._apiKey\n    defaultHeaders['Content-Type'] = 'application/json'\n    return defaultHeaders\n  }\n\n  async _timer (seconds) {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000))\n  }\n\n  _customErrorForResponse (response, messageFromServer) {\n    let CustomErrorKlass\n    if (response.status === 400) {\n      CustomErrorKlass = RequestMalformed\n    } else if (response.status === 401) {\n      CustomErrorKlass = RequestUnauthorized\n    } else if (response.status === 404) {\n      CustomErrorKlass = ObjectNotFound\n    } else if (response.status === 409) {\n      CustomErrorKlass = ObjectAlreadyExists\n    } else if (response.status === 422) {\n      CustomErrorKlass = ObjectUnprocessable\n    } else if (response.status >= 500 && response.status <= 599) {\n      CustomErrorKlass = ServerError\n    } else {\n      CustomErrorKlass = HTTPError\n    }\n\n    let errorMessage = `Request failed with HTTP code ${response.status}`\n    if (typeof messageFromServer === 'string' && messageFromServer.trim() !== '') {\n      errorMessage += ` | Server said: ${messageFromServer}`\n    }\n\n    const customErrror = new CustomErrorKlass(errorMessage)\n    customErrror.httpStatus = response.status\n\n    return customErrror\n  }\n}\n"],"file":"ApiCall.js"}