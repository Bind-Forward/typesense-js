{"version":3,"sources":["Typesense/ApiCall.js"],"names":["APIKEYHEADERNAME","HEALTHY","UNHEALTHY","ApiCall","configuration","_configuration","_apiKey","apiKey","_nodes","JSON","parse","stringify","nodes","_distributedSearchNode","distributedSearchNode","_connectionTimeoutSeconds","connectionTimeoutSeconds","_healthcheckIntervalSeconds","healthcheckIntervalSeconds","_numRetriesPerRequest","numRetries","_retryIntervalSeconds","retryIntervalSeconds","_logger","logger","_initializeMetadataForNodes","_currentNodeIndex","endpoint","parameters","performRequest","undefined","requestType","queryParameters","bodyParameters","additionalHeaders","validate","debug","toUpperCase","numTries","node","_getNextNode","index","requestOptions","method","url","_uriFor","headers","Object","assign","_defaultHeaders","params","data","timeout","validateStatus","status","transformResponse","transformedData","startsWith","response","_setNodeHealthcheck","Promise","resolve","reject","Error","request","path","message","lastException","warn","code","_timer","candidateNode","_resetNodeHealthcheckIfExpired","isHealthy","map","join","candidateNodeIndex","i","length","Date","now","lastHealthcheckTimestamp","forEach","protocol","host","port","defaultHeaders","seconds","setTimeout","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nimport axios from 'axios'\n\nconst APIKEYHEADERNAME = 'X-TYPESENSE-API-KEY'\nconst HEALTHY = true\nconst UNHEALTHY = false\n\nclass ApiCall {\n  constructor (configuration) {\n    this._configuration = configuration\n\n    this._apiKey = this._configuration.apiKey\n    this._nodes = JSON.parse(JSON.stringify(this._configuration.nodes)) // Make a copy, since we'll be adding additional metadata to the nodes\n    this._distributedSearchNode = JSON.parse(JSON.stringify(this._configuration.distributedSearchNode))\n    this._connectionTimeoutSeconds = this._configuration.connectionTimeoutSeconds\n    this._healthcheckIntervalSeconds = this._configuration.healthcheckIntervalSeconds\n    this._numRetriesPerRequest = this._configuration.numRetries\n    this._retryIntervalSeconds = this._configuration.retryIntervalSeconds\n\n    this._logger = this._configuration.logger\n\n    this._initializeMetadataForNodes()\n    this._currentNodeIndex = -1\n  }\n\n  get (endpoint, parameters = {}) {\n    return this.performRequest('get', endpoint, parameters)\n  }\n\n  delete (endpoint, parameters = {}) {\n    return this.performRequest('delete', endpoint, parameters)\n  }\n\n  post (endpoint, parameters = {}) {\n    return this.performRequest('post', endpoint, undefined, parameters)\n  }\n\n  put (endpoint, parameters = {}) {\n    return this.performRequest('put', endpoint, undefined, parameters)\n  }\n\n  async performRequest (requestType, endpoint, queryParameters = {}, bodyParameters = {}, additionalHeaders = {}) {\n    this\n      ._configuration\n      .validate()\n\n    let lastException\n\n    this._logger.debug(`Performing ${requestType.toUpperCase()} request: ${endpoint}`)\n    for (let numTries = 1; numTries <= this._numRetriesPerRequest + 1; numTries++) {\n      let node = this._getNextNode()\n      this._logger.debug(`Attempting ${requestType.toUpperCase()} request Try #${numTries} to Node ${node.index}`)\n      try {\n        const requestOptions = {\n          method: requestType,\n          url: this._uriFor(endpoint, node),\n          headers: Object.assign({}, this._defaultHeaders(), additionalHeaders),\n          params: queryParameters,\n          data: bodyParameters,\n          timeout: this._connectionTimeoutSeconds * 1000,\n          validateStatus: (status) => {\n            /* Override default validateStatus, which only considers 2xx a success.\n                In our case, anything below 500 should be considered a \"success\" and not retried.\n                We will handle anything not 2xx, but below 500 as a custom exception below.\n             */\n            return status > 0 && status < 500\n          },\n          transformResponse: [(data, headers) => {\n            let transformedData = data\n            if (headers !== undefined && typeof data === 'string' && headers['content-type'].startsWith('application/json')) {\n              transformedData = JSON.parse(data)\n            }\n            return transformedData\n          }]\n        }\n\n        let response = await axios(requestOptions)\n        this._setNodeHealthcheck(node, HEALTHY)\n\n        this._logger.debug(`Request to Node ${node.index} was successfully made. Response Code was ${response.status}.`)\n\n        // If response is 2xx return a resolved promise, else reject\n        if (response.status >= 200 && response.status < 300) {\n          return Promise.resolve(response.data)\n        } else {\n          return Promise.reject(new Error(`${response.request.path} - ${response.data.message}`))\n        }\n      } catch (error) {\n        // This block handles HTTPStatus < 0, HTTPStatus > 500 and network layer issues like connection timeouts\n        this._setNodeHealthcheck(node, UNHEALTHY)\n        lastException = error\n        this._logger.warn(`Request to Node ${node.index} failed due to \"${error.code} ${error.message}${error.response == null ? '' : ' - ' + JSON.stringify(error.response.data)}\"`)\n        // this._logger.debug(error.stack)\n        this._logger.warn(`Sleeping for ${this._retryIntervalSeconds}s and then retrying request...`)\n        await this._timer(this._retryIntervalSeconds)\n      }\n    }\n    this._logger.debug(`No retries left. Raising last error`)\n    return Promise.reject(lastException)\n  }\n\n  _getNextNode () {\n    let candidateNode\n\n    // Check if distributedSearchNode is set and is healthy, if so return it\n    if (this._distributedSearchNode != null) {\n      candidateNode = this._distributedSearchNode\n      this._resetNodeHealthcheckIfExpired(candidateNode)\n      this._logger.debug(`Nodes Health: Node ${candidateNode.index} is ${candidateNode.isHealthy === true ? 'Healthy' : 'Unhealthy'}`)\n      if (candidateNode.isHealthy === true) {\n        this._logger.debug(`Updated current node to Node ${candidateNode.index}`)\n        return candidateNode\n      } else {\n        this._logger.debug(`Falling back to individual nodes`)\n      }\n    }\n\n    // Fallback to nodes as usual\n    this._logger.debug(`Nodes Health: ${this._nodes.map(node => `Node ${node.index} is ${node.isHealthy === true ? 'Healthy' : 'Unhealthy'}`).join(' || ')}`)\n    let candidateNodeIndex = this._currentNodeIndex\n    candidateNode = this._nodes[candidateNodeIndex]\n    for (let i = 0; i <= this._nodes.length; i++) {\n      candidateNodeIndex = (candidateNodeIndex + 1) % this._nodes.length\n      candidateNode = this._nodes[candidateNodeIndex]\n      this._resetNodeHealthcheckIfExpired(candidateNode)\n      if (candidateNode.isHealthy === true) {\n        break\n      }\n      if (i === this._nodes.length) {\n        this._logger.debug(`No healthy nodes were found. Returning the next node, Node ${candidateNode.index}`)\n      }\n    }\n    this._currentNodeIndex = candidateNodeIndex\n    this._logger.debug(`Updated current node to Node ${candidateNode.index}`)\n    return candidateNode\n  }\n\n  _resetNodeHealthcheckIfExpired (node) {\n    // this._logger.debug(`Checking if Node ${node.index} healthcheck needs to be reset`)\n    if (node.isHealthy === true || Date.now() - node.lastHealthcheckTimestamp < (this._healthcheckIntervalSeconds * 1000)) {\n      // this._logger.debug(`Healthcheck reset not required for Node ${node.index}. It is currently marked as ${node.isHealthy === true ? 'Healthy' : 'Unhealthy'}. Difference between current time and last healthcheck timestamp is ${Date.now() - node.lastHealthcheckTimestamp}`)\n      return null\n    }\n\n    this._logger.debug(`Node ${node.index} has exceeded healthcheckIntervalSeconds of ${this._healthcheckIntervalSeconds}s. Adding it back into rotation.`)\n    this._setNodeHealthcheck(node, HEALTHY)\n    this._logger.debug(`Nodes Health: ${this._nodes.map(node => `Node ${node.index} is ${node.isHealthy === true ? 'Healthy' : 'Unhealthy'}`).join(' || ')}`)\n  }\n\n  _initializeMetadataForNodes () {\n    if (this._distributedSearchNode != null) {\n      let node = this._distributedSearchNode\n      node.index = 'DistributedSearch'\n      this._setNodeHealthcheck(node, HEALTHY)\n    }\n\n    this._nodes.forEach((node, i) => {\n      node.index = i\n      this._setNodeHealthcheck(node, HEALTHY)\n    })\n  }\n\n  _setNodeHealthcheck (node, isHealthy) {\n    node.isHealthy = isHealthy\n    node.lastHealthcheckTimestamp = Date.now()\n  }\n\n  _uriFor (endpoint, node) {\n    return `${node.protocol}://${node.host}:${node.port}${node.path}${endpoint}`\n  }\n\n  _defaultHeaders () {\n    let defaultHeaders = {}\n    defaultHeaders[APIKEYHEADERNAME] = this._apiKey\n    defaultHeaders['Content-Type'] = 'application/json'\n    return defaultHeaders\n  }\n\n  async _timer (seconds) {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000))\n  }\n}\n\nmodule.exports = ApiCall\n"],"file":"ApiCall.js"}